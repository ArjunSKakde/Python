#Given nums and target return indices of two elements such that they add up to the target
# [2,7,8,11,15] , 9

Brute Force Approach
'''
def indices(nums,target):
    for i in range(0,len(nums)):
        for j in range(i+1,len(nums)):
            if nums[i] + nums[j] ==target:
                return i,j
'''

Hash Map
'''
def indices(nums,target):
    dictionary = {}
    for i,num in enumerate(nums):
        if target - num in dictionary.keys():
            return i, dictionary[target-num]
        else:
            dictionary[num] = i
'''


If the list is sorted allready we can use two pointer method
'''

def indices (nums, target):
    left = 0 
    right = len(nums)-1
    while nums[left] + nums[right] != target:
        if nums[left] + nums[right] < target:
            left += 1
        elif nums[left] + nums[right] > target:
            right += 1
    return left,right

indices([1,2,3,4],6)
'''

#Given an integer array nums, find three numbers whose product is maximum and return maximum product

def max_sum(nums):
    nums.sort()
    return max(nums[-3] * nums[-2] * nums[-1],nums[0]*nums[1]*nums[2])
   
 
        
max_sum([1,10,2,6,5,3])



#Given an integer array nums, find three numbers whose product is maximum and return maximum product
'''
def max_sum(nums):
    nums.sort()
    return max(nums[-3] * nums[-2] * nums[-1],nums[0]*nums[1]*nums[2])
   
 
        
max_sum([1,10,2,6,5,3])
'''


# integer array : height, each element represents the heights of a vertical line drawn at that index
#Find two lines that together with the x-axis form a container that holds the most water
#return maximum area of water that can be contained

#height = [1,8,6,2,5,4,8,7] out : 49

'''

def area(height):
    left = 0
    right = len(height)-1
    current_area = 0
    while left < right:
        current_area = max(current_area,(max(height[left],height[right]) * (right-left)))
        if height[left] > height[right]:
            right -=1
            print(right)
        else:
            left +=1
            print(left)
         
    return current_area
area([1,8,6,2,5,4,8,7])
#area([4,3,2,1,4])
'''




